[
{
	"uri": "/2.-preparation/1.-create-vpc--subnet/",
	"title": "Create VPC and Subnet",
	"tags": [],
	"description": "",
	"content": "Amazon Virtual Private Cloud (VPC) Amazon Virtual Private Cloud (Amazon VPC) allows you to launch AWS resources in a logically isolated network that you define. It acts like a virtual data center in the cloud.\n‚úÖ Goal Create a new VPC with the following network structure:\nSubnet Name CIDR Purpose PublicSubnet1 10.0.1.0/24 For ALB and NAT Gateway PrivateSubnet1 10.0.2.0/24 For ECS Tasks, RDS, RDS Proxy üõ†Ô∏è Step-by-Step Instructions 1Ô∏è. Access AWS Management Console Go to AWS Management Console\nSearch and select the VPC service\n2Ô∏è. Create a New VPC Go to VPC Dashboard \u0026gt; select Your VPCs\nClick Create VPC\nChoose VPC only\nFill in the details:\nName tag: MyApp-VPC IPv4 CIDR block: 10.0.0.0/16 Tenancy: Default Click Create VPC\nüìå Explanation:\nCIDR 10.0.0.0/16 allows you to divide into multiple subnets. Tenancy: Default helps reduce costs and allows all EC2 instance types. 3Ô∏è. Enable DNS Settings for the VPC Go back to Your VPCs\nSelect the VPC you just created \u0026gt; click Actions \u0026gt; Edit VPC settings\nEnable:\n‚úÖ DNS hostnames ‚úÖ DNS resolution Click Save 4Ô∏è. Create Subnets 4.1 Create PublicSubnet1 Go to VPC Dashboard \u0026gt; select Subnets Click Create subnet Under VPC ID, select MyApp-VPC Fill in the details: Subnet name: PublicSubnet1 Availability Zone: Choose any (e.g., ap-southeast-1a) IPv4 CIDR block: 10.0.1.0/24 Click Create subnet 4.2 Create PrivateSubnet1 Go to VPC Dashboard \u0026gt; select Subnets Click Create subnet Under VPC ID, select MyApp-VPC Fill in the details: Subnet name: PrivateSubnet1 Availability Zone: Choose any (e.g., ap-southeast-1b) IPv4 CIDR block: 10.0.2.0/24 Click Create subnet 4.3 Create PrivateSubnet1 Go to VPC Dashboard \u0026gt; select Subnets Click Create subnet Under VPC ID, select MyApp-VPC Fill in the details: Subnet name: PrivateSubnet2 Availability Zone: Choose any (e.g., ap-southeast-1b) IPv4 CIDR block: 10.0.3.0/24 Click Create subnet ‚úÖ Expected Result A VPC named MyApp-VPC with CIDR 10.0.0.0/16 is created\nA public subnet PublicSubnet1 created for ALB and NAT Gateway\nTwo private subnet PrivateSubnet1 created for ECS, RDS, RDS Proxy\n"
},
{
	"uri": "/1.-introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "1. Overview Amazon RDS Proxy is a fully managed database proxy service by AWS, designed to optimize connections to Amazon RDS and Amazon Aurora. This service helps applications:\nImprove database access performance. Optimize connection reuse (connection pooling). Reduce latency in serverless environments like AWS Lambda. Increase availability and failover resilience. 2. How It Works RDS Proxy operates as an intelligent intermediary layer between applications and databases:\nConnection Pooling: RDS Proxy maintains a pool of connections to the backend database. When applications request access, RDS Proxy will reuse existing connections if available, or open new ones if needed. RDS Proxy manages connection lifetime, failover, and opening/closing connections based on system status. 3. Key Features Feature Description üîÅ Connection pooling Reduces concurrent database connections, avoiding connection limits ‚ö° Lambda/Container optimization Reduces latency when connecting to databases in serverless environments üîê IAM \u0026amp; TLS integration Strong security with IAM, Secrets Manager, and TLS encryption üõ°Ô∏è Automatic failover Supports automatic database backend switching during failures üìä Monitoring integration Integrates with CloudWatch for performance monitoring 4. Pricing and Regional Availability \u0026amp; Versions üí∞ Pricing Amazon RDS Proxy pricing is based on:\nNumber of vCPUs used by the proxy Runtime of the proxy (per hour) No additional charges based on number of connections or requests You still pay standard charges for Amazon RDS or Aurora üìò View detailed pricing\n5. Quotas and Limits for RDS Proxy Item Default Number of Proxies per account 20 Target groups per Proxy 20 Database instances per Proxy 1 Endpoints per Proxy 1 Connection acquisition timeout 120 seconds (adjustable) Concurrent connections supported Thousands (auto scale) You can request limit increases through AWS Support if needed.\nAdditional Limitations for RDS for MariaDB Limitations when using Amazon RDS Proxy with RDS for MariaDB:\nProxy only listens on port 3306, but still connects to the database using the configured port. ‚ùå Does not support self-managed MariaDB on EC2. ‚ùå Does not work if read_only = 1 in the database parameter group. ‚ùå Does not support MariaDB compression (--compress, -C). ‚ùå Does not support auth_ed25519 authentication plugin. ‚ùå Does not support TLS 1.3. ‚ö†Ô∏è GET DIAGNOSTICS may return incorrect results if RDS Proxy reuses connections. ‚ùå Does not support caching_sha2_password (via ClientPasswordAuthType). ‚ö†Ô∏è Should not use sql_auto_is_null = true in proxy initialization queries ‚Äî may cause application errors. Additional Limitations for RDS for Microsoft SQL Server Limitations when using RDS Proxy with RDS for SQL Server:\n‚ö†Ô∏è Number of Secrets in AWS Secrets Manager may be high if SQL Server uses case-sensitive collation. ‚ùå Does not support connections using Active Directory. ‚ùå IAM authentication does not work with clients that don\u0026rsquo;t support token attributes. ‚ö†Ô∏è System variables like @@IDENTITY, @@ROWCOUNT, SCOPE_IDENTITY() may return incorrect values if not retrieved within the same statement session. ‚ùå If using MARS (Multiple Active Result Sets), proxy will not execute initialization queries. ‚ùå Does not support SQL Server 2014 and SQL Server 2022 versions. ‚ùå Does not support clients that cannot handle multiple TLS messages in one record. Additional Limitations for RDS for MySQL Limitations when using Amazon RDS Proxy with RDS for MySQL:\nProxy only listens on port 3306. ‚ùå Does not support self-managed MySQL on EC2. ‚ùå Does not work if read_only = 1 in the database parameter group. ‚ùå Does not support MySQL compression (--compress, -C). ‚ùå Does not support MySQL dual password. ‚ùå Does not support clients that cannot handle multiple responses in one TLS record. ‚ö†Ô∏è GET DIAGNOSTICS may return incorrect results when reusing connections. ‚ö†Ô∏è Some statements like SET LOCAL may change session state without causing pinning. ‚ùå ROW_COUNT() does not work correctly with multi-statement queries. ‚ö†Ô∏è With MySQL 8.4 C driver, mysql_stmt_bind_named_param() may create error packets if parameter count exceeds placeholders. ‚ö†Ô∏è caching_sha2_password requires TLS and may have issues with Go driver (go-sql). ‚ö†Ô∏è Should not use sql_auto_is_null = true in initialization queries. Additional Limitations for RDS for PostgreSQL Limitations when using Amazon RDS Proxy with RDS for PostgreSQL:\nProxy only listens on port 5432. ‚ùå Does not support CancelRequest command from client (like Ctrl+C in psql). ‚ö†Ô∏è lastval results may be inaccurate ‚Äî should use INSERT ... RETURNING. ‚ùå Does not support streaming replication. ‚ö†Ô∏è scram_iterations defaults to 4096 when client auth with proxy (PostgreSQL 16). ‚ö†Ô∏è Requires a default database. ‚ö†Ô∏è If using ALTER ROLE ... SET ROLE, need to set SET ROLE again in initialization query to avoid pinning errors. ‚ùå Does not support session pinning filters for PostgreSQL. ‚úÖ Note: Limitations may change over time. Refer to the official Amazon RDS Proxy documentation for updates.\n6. RDS Proxy Concepts and Terminology Term Description Proxy endpoint Address that applications use instead of the original database endpoint Connection pool Group of pre-opened connections to serve multiple clients Target group Group of database instances associated with a Proxy IAM Role Role assigned to grant Proxy access from Lambda or EC2 Secrets Manager Service for securely storing database login credentials 7. Security Amazon RDS Proxy integrates multiple security layers:\nIAM Authentication: Applications authenticate using IAM roles, no need for hard-coded passwords. TLS Encryption: Encrypts entire transmission path from client ‚Üí proxy ‚Üí backend database. Secrets Manager: Manages, rotates, and protects login credentials. VPC Integration: Operates within Virtual Private Cloud (VPC), limiting access to internal networks. 8. Notes RDS Proxy does not replace the database, but serves as an intermediary layer for performance and security enhancement. Proxy must be in the same VPC as RDS or Aurora. Does not support all database versions or configurations (Oracle, SQL Server). Works best with applications using short-term, high-concurrency connections like Lambda or microservices. Should not use RDS Proxy if applications have few connections and long-term persistent connections. 9. Integration with Other AWS Services Amazon RDS Proxy works efficiently when integrated with other AWS services:\nService Primary Integration Role AWS Lambda Short-term, high-scale connections ‚Äî reduces cold start and timeout when accessing database Amazon ECS / EKS Supports stable and secure database access via proxy from containers Amazon CloudWatch Monitors metrics like ConnectionCount, CurrentClientConnections AWS Secrets Manager Automatically rotates and protects authentication credentials AWS IAM IAM role-based authentication instead of hard-coded passwords 10. Monitoring Metrics (CloudWatch Metrics) RDS Proxy provides several important CloudWatch metrics for monitoring and diagnosing performance:\nMetric Meaning DatabaseConnections Number of connections to backend database currently in use ClientConnections Number of client connections to proxy CurrentSessionPercent Percentage of sessions in use out of total possible DatabaseConnectionBorrowTimeouts Number of times clients failed to acquire connection within timeout ActiveConnections Total number of actively used connections üëâ You can set up automatic alerts based on these metrics using Amazon CloudWatch Alarms for proactive monitoring and timely response to performance issues.\n11. Best Practices for Using RDS Proxy To achieve maximum performance and ensure stability when using Amazon RDS Proxy, you should apply the following practices:\n‚úÖ Design applications to use short-term connections: Avoid holding database connections unnecessarily long. ‚úÖ Use IAM or Secrets Manager: Avoid hard-coding credentials in source code. ‚úÖ Regularly monitor CloudWatch metrics: To detect issues in a timely manner. ‚úÖ Optimize database parameter configuration in Parameter Group: such as connection timeout, autocommit,\u0026hellip; ‚úÖ Configure initialization queries clearly to ensure each connection starts with the desired state. üí° Good design of initialization queries and connection state control helps reduce connection pinning and improves connection reuse efficiency.\n"
},
{
	"uri": "/2.-preparation/2.-cretae-internet-gateway--nat-gateway/",
	"title": "Configure Internet Gateway &amp; NAT Gateway",
	"tags": [],
	"description": "",
	"content": "üõ†Ô∏è Steps to Follow 1. Create an Internet Gateway (IGW) Go to VPC Dashboard \u0026gt; select Internet Gateways Click Create internet gateway\nEnter: Name tag: MyApp-IGW Click Create internet gateway\nAfter creation, select MyApp-IGW \u0026gt; click Actions \u0026gt; Attach to VPC\nChoose MyApp-VPC \u0026gt; click Attach internet gateway\nüìå Explanation:\nThe Internet Gateway allows public subnets to access the Internet. 2. Create a NAT Gateway Go to VPC Dashboard \u0026gt; NAT Gateways Click Create NAT Gateway\nEnter: Name: MyApp-NAT Subnet: select PublicSubnet1 Elastic IP allocation ID: select Allocate Elastic IP Click Create NAT Gateway\nüìå Explanation:\nThe NAT Gateway allows private subnets to access the Internet (e.g., for system updates, downloading packages). "
},
{
	"uri": "/2.-preparation/",
	"title": "Prerequisite Steps",
	"tags": [],
	"description": "",
	"content": "AWS Environment Setup This guide outlines the necessary infrastructure setup steps before deploying services like ECS, RDS, and RDS Proxy.\nContent 1. Create VPC \u0026amp; Subnet 2. Create Internet Gateway \u0026amp; NAT Gateway 3. Create Security Groups 4. Create RDS Instance 5. Using Secrets Manager 6. Assign IAM Role 1. Create VPC \u0026amp; Subnet Step 1: Create a new VPC with CIDR block 10.0.0.0/16. Step 2: Create two subnets: PublicSubnet1: for ALB and NAT Gateway (e.g., 10.0.1.0/24) PrivateSubnet1: for ECS, RDS, and RDS Proxy (e.g., 10.0.2.0/24) 2. Create Internet Gateway \u0026amp; NAT Gateway Step 1: Create and attach an Internet Gateway (IGW) to the VPC. Step 2: Create a NAT Gateway in PublicSubnet1, associate with an Elastic IP. Step 3: Configure route tables: Public subnet ‚Üí IGW for outbound internet access. Private subnet ‚Üí NAT Gateway to access internet indirectly. 3. Create Security Groups Step 1: Create SG-ALB to allow HTTP/HTTPS (80/443) from the internet. Step 2: Create SG-ECS to allow traffic from ALB on ports like 3000, 8080. Step 3: Create SG-RDSProxy to allow ECS access on DB ports (3306, 5432). Step 4: Create SG-RDS to allow only RDS Proxy to access the DB. 4. Create RDS Instance Step 1: Choose a database engine (MySQL, PostgreSQL, or Aurora). Step 2: Deploy the DB in PrivateSubnet1. Step 3: Attach SG-RDS and (optional) enable IAM authentication. 5. Using Secrets Manager Step 1: Create a secret in AWS Secrets Manager to store DB credentials in JSON format. Step 2: Note the ARN of the secret to reference in ECS Task definitions. 6. Assign IAM Role Step 1: Create an IAM role (e.g., ecsTaskExecutionRole). Step 2: Attach a policy allowing: Access to Secrets Manager RDS database connection Logging to CloudWatch Ensure all these components are in place before proceeding to ECS deployment and RDS Proxy connection setup.\n"
},
{
	"uri": "/3.-configuration/",
	"title": "Create Admin Group and Admin User",
	"tags": [],
	"description": "",
	"content": "Creating an Admin Group Log in to the Control Panel on the AWS Web Service page.\nClick on your account name at the top right corner and select My Security Credentials.\nNote: If you don\u0026rsquo;t see the My Security Credentials menu, you can click on the search icon and type IAM. Then click on the IAM service to access the IAM management interface.\nOn the left sidebar, choose User Groups, and then select Create Group.\nUnder the Name the group section, enter the Group name (For example: AdminGroup), and scroll down.\nIn the Attach permissions policies section, type AdministratorAccess in the search bar and select it. Finally, click on Create Group.\nThe creation of the admin group is complete.\nCreate Admin User You can use the AWS Management Console to create IAM users.\nFollow the sign-in procedure appropriate to your user type as described in the topic How to sign in to AWS in the AWS Sign-In User Guide.\nOn the Console Home page, select the IAM service.\nIn the navigation pane, select Users, and then select Add users.\nOn the Specify user details page, under User details, enter the new user\u0026rsquo;s name in the User name field. This will be their sign-in name for AWS.\nNote: User names can be up to 64 letters, digits, and certain characters: plus (+), equal (=), comma (,), period (.), at sign (@), underscore (_), and hyphen (-). User names must be unique within an account, and they are case-sensitive when used in policies or ARNs. However, they are case-insensitive during the sign-in process.\nSelect Provide user access to the AWS Management Console. This generates AWS Management Console sign-in credentials for the new user.\nYou\u0026rsquo;ll be asked whether you\u0026rsquo;re providing console access to a person. It\u0026rsquo;s recommended to create users in IAM Identity Center rather than IAM. To switch to creating the user in IAM Identity Center, select Specify a user in Identity Center.\nIf IAM Identity Center is not enabled, this option takes you to the service page in the console to enable it. If IAM Identity Center is enabled, this option takes you to the Specify user details page in IAM Identity Center. If you cannot use IAM Identity Center, select I want to create an IAM user and continue following this procedure.\nFor Console password, choose one of the following:\nAutogenerated password: The user gets a randomly generated password that adheres to the account password policy. You can view or download the password on the Retrieve password page. Custom password: Assign a password that you enter in the box. Optionally, select Users must create a new password at next sign-in (recommended) to ensure the user changes their password the first time they sign in.\nSelect Next.\nOn the Set permissions page, choose how to assign permissions for this user:\nAdd user to group: Assign the user to one or more groups with existing permissions policies. Copy permissions: Copy permissions from an existing user with similar needs. Attach policies directly: Attach AWS managed or custom policies directly to the user. It\u0026rsquo;s recommended to attach policies to groups whenever possible.\nOptionally, set a permissions boundary in the Permissions boundary section. This is an advanced feature that controls maximum permissions.\nSelect Next.\nOptionally, on the Review and create page, under Tags, you can attach metadata to the user using key-value pairs.\nReview your choices, and when ready, select Create user.\nOn the Retrieve password page, get the password assigned to the user:\nSelect Show next to the password to view it manually.\nSelect Download .csv to save the user\u0026rsquo;s sign-in credentials as a .csv file.\nSelect Email sign-in instructions to customize and send an email to the user. The email includes their user name and a URL to the account sign-in page:\nUser name\rURL: https://AWS-account-ID-or-alias.signin.aws.amazon.com/console Note: The user\u0026rsquo;s password is not included in the email.\nIf the user also requires access keys, refer to Managing access keys for IAM users.\nLogin to AdminUser Return to the IAM service, and select Users in the left sidebar. Click on the name of the IAM User you just selected. In the Summary section, select the Security credentials tab. Look at the line Summary: Console sign-in link and copy the link next to it. This is the link you use to log in to the IAM User. Open an incognito tab of the browser you are using and paste the link into the search bar. Incognito tab login allows you to log in to AWS with an IAM User without having to log out of the root user in the main tab.\nEnter the correct IAM User name and password that you entered in the create IAM User section above. Click sign in. Congratulations, you have successfully accessed your account as an IAM User AdminUser. In The next step, we will switch to using IAM Role to improve the security of your account. Creating Access Key for AWS Root User Minimum Required Permissions To perform the following steps, you need at least the following IAM (Identity and Access Management) permissions:\nYou must log in as the root user of AWS, which does not require any additional IAM permissions. These steps cannot be performed as an IAM user or a role.\nUse the email address and password of your AWS account to sign in to the AWS Management Console as the root user.\nIn the top-right corner of the console, select your account name or number, then choose \u0026ldquo;Security Credentials\u0026rdquo;.\nUnder \u0026ldquo;Access keys,\u0026rdquo; select \u0026ldquo;Create access key.\u0026rdquo; If this option is unavailable, it means you have the maximum number of access keys. You must delete one of the existing access keys before creating a new one. For more information, see IAM Object Quotas in the IAM User Guide.\nOn the \u0026ldquo;Alternatives to root user access keys\u0026rdquo; page, consider security recommendations. To proceed, check the box and then select \u0026ldquo;Create access key.\u0026rdquo;\nOn the \u0026ldquo;Retrieve access key\u0026rdquo; page, your Access Key ID will be displayed.\nUnder the \u0026ldquo;Secret access key\u0026rdquo; section, select \u0026ldquo;Show,\u0026rdquo; then copy the Access Key ID and Secret Key from your browser window and paste them into a secure location. Alternatively, you can select \u0026ldquo;Download .csv file\u0026rdquo; to download a file named \u0026ldquo;rootkey.csv\u0026rdquo; containing the Access Key ID and Secret Key. Keep the file in a secure location.\nSelect \u0026ldquo;Done.\u0026rdquo; When you no longer need the access key, we recommend either deleting it or at least considering disabling it to prevent misuse.\nNote: These steps apply only to the root user account on AWS. For IAM users or roles, the process of creating and managing access keys may differ.\nRevoking Access Key for Root User on AWS Minimum Permissions To perform the following steps, you must have at least the following IAM (Identity and Access Management) permissions:\nYou must be logged in as the root user of your AWS account, this does not require any additional AWS Identity and Access Management (IAM) permissions. You cannot perform these steps as an IAM user or a role. Use the email address and password of your AWS account to sign in to the AWS Management Console as the root user. In the top-right corner of the console, select your account name or number, then choose Security Credentials. Under Access keys, select the access key you wish to delete, then in the Actions section, choose Delete. Note Alternatively, you can choose to Deactivate an access key instead of permanently deleting it. This allows you to continue using it in the future without changing both the key ID and secret key. While the key is deactivated, any requests using it in AWS API requests will fail with an \u0026ldquo;access denied\u0026rdquo; error.\nIn the Delete dialog, select Deactivate, enter the access key ID to confirm your intention to delete it, then choose Delete.\n"
},
{
	"uri": "/2.-preparation/3.create-route-tables/",
	"title": "Create Route Table",
	"tags": [],
	"description": "",
	"content": "üõ†Ô∏è Steps to Follow 1. Create Route Table for Public Subnet Go to VPC Dashboard \u0026gt; Route Tables\nClick Create route table\nEnter:\nName tag: MyApp-Public-RT VPC: select MyApp-VPC Click Create route table\nSelect the route table you just created \u0026gt; Routes tab \u0026gt; click Edit routes\nClick Add route Destination: 0.0.0.0/0 Target: choose Internet Gateway (MyApp-IGW) Click Save changes Go to the Subnet associations tab \u0026gt; click Edit subnet associations\nCheck PublicSubnet1 Click Save associations 2. Create Route Table for Private Subnet Click Create route table\nEnter:\nName tag: MyApp-Private-RT VPC: select MyApp-VPC Click Create route table\nSelect the route table you just created \u0026gt; Routes tab \u0026gt; Edit routes\nClick Add route Destination: 0.0.0.0/0 Target: choose NAT Gateway (MyApp-NAT) Click Save changes Go to the Subnet associations tab \u0026gt; click Edit subnet associations\nCheck PrivateSubnet1 Click Save associations "
},
{
	"uri": "/4-verify-new-account/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": "Content:\nCheck the information Create a support case with AWS Support During the AWS account creation process, at the contact phone number verification step, sometimes there will be a situation where no SMS or calls from AWS will be received. In that case, follow these steps to complete the account information verification:\nCheck the information First, double-check your account information and make sure it\u0026rsquo;s entered correctly:\nYou have entered the phone number information and selected the correct international area code to receive the call. If you use a mobile phone, check your phone to make sure you are still within range to receive calls. Payment method information has been entered correctly. Make sure that the phone number you provide in your AWS account is reachable.\nCreate a support case with AWS Support After checking that the information is correct but still has not received the verification call, AWS Support will assist you to activate your account manually.\nGo to the AWS Support console, select Create case. Select Account and billing support and enter the support information: Type: select Account. Category: select Activation. Subject: briefly write down your situation (eg Did not receive an SMS message or call for verification) Description: Provide details of the situation encountered and information about the time you need support to activate the account. Attachments: Attach an image describing the authentication step you are facing. Under Contact options, select Chat under Contact methods. Select Submit. 5. The AWS Support team will contact and assist in activating your account.\nYou can create a support request with AWS Support even if your account is not activated.\n"
},
{
	"uri": "/2.-preparation/4.-create-security-groups/",
	"title": "Create Security Groups",
	"tags": [],
	"description": "",
	"content": "Security Groups (SGs) control inbound and outbound traffic for resources such as EC2, ALB, ECS, and RDS.\nüìã Security Group Configuration Table SG Name Inbound From Ports Description SG-ALB 0.0.0.0/0 80, 443 Public HTTP/S access SG-ECS SG-ALB 8080 ALB connects to ECS containers SG-RDSProxy SG-ECS 3306 ECS accesses RDS Proxy SG-RDS SG-RDSProxy 3306 Proxy connects to database üõ†Ô∏è Step-by-Step Instructions 1. Create SG-ALB Go to VPC Dashboard ‚Üí select Security Groups from the left panel.\nClick Create Security Group.\nEnter:\nSecurity group name: SG-ALB Description: Allow HTTP/HTTPS from Internet VPC: Select MyApp-VPC Under Inbound rules, click Add rule:\nType: HTTP, Port: 80, Source: 0.0.0.0/0 Type: HTTPS, Port: 443, Source: 0.0.0.0/0 Click Create Security Group.\n2. Create SG-ECS Go to VPC Dashboard ‚Üí select Security Groups from the left panel.\nClick Create Security Group.\nEnter:\nSecurity group name: SG-ECS Description: Allow traffic from ALB to ECS VPC: Select MyApp-VPC Under Inbound rules, click Add rule:\nType: Custom TCP, Port: 8080, Source: SG-ALB Click Create Security Group.\n3. Create SG-RDSProxy Go to VPC Dashboard ‚Üí select Security Groups from the left panel.\nClick Create Security Group.\nEnter:\nSecurity group name: SG-RDSProxy\nDescription: Allow ECS to access RDS Proxy\nVPC: Select MyApp-VPC\nUnder Inbound rules, click Add rule:\nType: MYSQL/Aurora, Port: 3306, Source: SG-ECS Click Create Security Group.\n4. Create SG-RDS Go to VPC Dashboard ‚Üí select Security Groups from the left panel.\nClick Create Security Group.\nEnter:\nSecurity group name: SG-RDS Description: Allow RDS Proxy to access DB VPC: Select MyApp-VPC Under Inbound rules, click Add rule:\nType: MYSQL/Aurora, Port: 3306, Source: SG-RDSProxy Click Create Security Group.\n"
},
{
	"uri": "/2.-preparation/5.-create-rds-instance/",
	"title": "Create RDS Instance",
	"tags": [],
	"description": "",
	"content": "Enabling Multi-Factor Authentication (MFA) on AWS Note: Before proceeding, ensure you are logged in to AWS using the root user.\nEnable Virtual MFA Device through AWS Management Console To enhance the security of your AWS account, you can set up Multi-Factor Authentication (MFA). This adds an extra layer of protection by requiring a second form of verification in addition to your password. Follow these steps to set up and activate a virtual MFA device:\nSign in to the AWS Management Console.\nIn the upper right corner of the console, you will see your account name. Click on it and select My Security Credentials.\nExpand the Multi-factor authentication (MFA) section and select Assign MFA.\nIn the Select MFA Device interface:\nEnter a Device Name. Select MFA Device as the Authenticator App. Select Next. Install a compatible authenticator app on your smartphone. You can find a list of MFA-compatible apps here.\nInstall the authenticator extension for Google Chrome. Select Add to Chrome.\nUse the authenticator app to generate an MFA code and enter it for confirmation.\nPerform a QR code scan using the authenticator app.\nAfter scanning the QR code, enter the generated MFA codes into the corresponding fields.\nOnce the codes are entered, select Add MFA to complete the setup.\nComplete the additional MFA setup steps as prompted. By setting up Multi-Factor Authentication, you add an extra layer of security to your AWS account, helping to protect your valuable resources and data.\n"
},
{
	"uri": "/2.-preparation/6.-create-secrets-manager/",
	"title": "Using Secrets Manager",
	"tags": [],
	"description": "",
	"content": "Enabling Multi-Factor Authentication (MFA) on AWS Note: Before proceeding, ensure you are logged in to AWS using the root user.\nEnable Virtual MFA Device through AWS Management Console To enhance the security of your AWS account, you can set up Multi-Factor Authentication (MFA). This adds an extra layer of protection by requiring a second form of verification in addition to your password. Follow these steps to set up and activate a virtual MFA device:\nSign in to the AWS Management Console.\nIn the upper right corner of the console, you will see your account name. Click on it and select My Security Credentials.\nExpand the Multi-factor authentication (MFA) section and select Assign MFA.\nIn the Select MFA Device interface:\nEnter a Device Name. Select MFA Device as the Authenticator App. Select Next. Install a compatible authenticator app on your smartphone. You can find a list of MFA-compatible apps here.\nInstall the authenticator extension for Google Chrome. Select Add to Chrome.\nUse the authenticator app to generate an MFA code and enter it for confirmation.\nPerform a QR code scan using the authenticator app.\nAfter scanning the QR code, enter the generated MFA codes into the corresponding fields.\nOnce the codes are entered, select Add MFA to complete the setup.\nComplete the additional MFA setup steps as prompted. By setting up Multi-Factor Authentication, you add an extra layer of security to your AWS account, helping to protect your valuable resources and data.\n"
},
{
	"uri": "/",
	"title": "Amazon RDS Proxy",
	"tags": [],
	"description": "",
	"content": "Amazon Relational Database Service Proxy (Amazon RDS Proxy) Overview of Amazon RDS Proxy Amazon Relational Database Service Proxy (Amazon RDS Proxy) is a fully managed database proxy service for Amazon RDS that helps improve performance, increase availability, and enhance scalability for applications using Amazon RDS or Aurora.\nWhat is RDS Proxy? RDS Proxy acts as an intermediary layer between applications and Amazon RDS or Aurora. RDS Proxy manages connection pooling to reduce database connection overhead and reuses existing connections to optimize resources and improve application performance.\nKey Benefits Feature Benefits Connection Pooling Reduces new connections and saves resources Automatic failover Increases application availability Lambda/Container optimization Reduces cost and latency in serverless High security Supports IAM, TLS and Secrets Manager Reduces \u0026ldquo;too many connections\u0026rdquo; errors Prevents database connection limit exceeded Security Integration RDS Proxy supports:\nIAM authentication: No need to store username/password in applications TLS encryption: End-to-end encryption from application to database Secrets Manager: Secure storage and rotation of login credentials Suitable Use Cases Serverless applications (AWS Lambda) requiring fast connections Microservices with multiple instances accessing the same DB Reducing cost and latency when connecting to database frequently Systems requiring automatic recovery during failover How It Works Application connects to RDS Proxy endpoint instead of RDS endpoint RDS Proxy checks connection pool, reuses connection if available If not available, RDS Proxy opens new connection to RDS endpoint Manages connection lifecycle and automatic failover Important Notes RDS Proxy does not replace RDS or Aurora but serves as an intermediate connection layer. You need to enable IAM role for Lambda/EC2 to connect to proxy. Use with Multi-AZ RDS to increase availability for failover scenarios. RDS Proxy must be in the same VPC as RDS. If you are building a system that requires high availability and good performance when accessing databases, RDS Proxy is a service worth considering.\n"
},
{
	"uri": "/categories/aws-services/",
	"title": "AWS Services",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/categories/database-optimization/",
	"title": "Database Optimization",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]