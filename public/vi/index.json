[
{
	"uri": "/vi/",
	"title": "Amazon RDS Proxy",
	"tags": [],
	"description": "",
	"content": "Amazon Relational Database Service Proxy (Amazon RDS Proxy) Tổng quan về Amazon RDS Proxy Amazon Relational Database Service Proxy (Amazon RDS Proxy) là một dịch vụ proxy cơ sở dữ liệu được quản lý hoàn toàn dành cho Amazon RDS, giúp cải thiện hiệu năng, tăng tính sẵn sàng và khả năng mở rộng cho các ứng dụng sử dụng Amazon RDS hoặc Aurora.\nRDS Proxy Là Gì? RDS Proxy đóng vai trò như một lớp trung gian giữa ứng dụng và Amazon RDS hoặc Aurora. RDS Proxy quản lý connection pooling giảm tải kết nối đến cơ sở dữ liệu và tái sử dụng các kết nối hiện có giúp tối ưu hóa tài nguyên và cải thiện hiệu suất ứng dụng.\nLợi Ích Chính Tính năng Lợi ích mang lại Connection Pooling Giảm số kết nối mới và tiết kiệm tài nguyên Tự động failover Tăng tính sẵn sàng cho ứng dụng Tối ưu cho Lambda/Container Giảm chi phí và độ trễ kết nối trong serverless Bảo mật cao Hỗ trợ IAM, TLS và Secrets Manager Giảm lỗi \u0026ldquo;too many connections\u0026rdquo; Hạn chế vượt giới hạn kết nối Database Tích Hợp Bảo Mật RDS Proxy hỗ trợ:\nIAM authentication: không cần lưu username/password trong ứng dụng TLS encryption: mã hóa kết nối end-to-end từ ứng dụng đến database Secrets Manager: lưu trữ và xoay vòng thông tin đăng nhập an toàn Tình Huống Sử Dụng Phù Hợp Ứng dụng serverless (AWS Lambda) cần kết nối nhanh Microservices có nhiều phiên bản cùng truy cập DB Giảm chi phí và độ trễ khi kết nối Database nhiều lần Hệ thống yêu cầu tự động phục hồi khi failover Cách Hoạt Động Ứng dụng kết nối đến RDS Proxy endpoint thay vì RDS endpoint RDS Proxy kiểm tra connection pool, nếu có sẵn tái sử dụng kết nối Nếu không có, RDS Proxy mở kết nối mới đến RDS endpoint Quản lý lifecycle kết nối và failover tự động Lưu ý RDS Proxy không thay thế RDS hay Aurora mà nó chỉ là lớp kết nối trung gian. Bạn cần bật IAM role cho Lambda/EC2 để kết nối đến proxy. Sử dụng cùng với Multi-AZ RDS để tăng độ sẵn sàng cho trường hợp fallover. RDS Proxy phải nằm trong cùng một VPC với RDS. Nếu bạn đang xây dựng một hệ thống cần tính sẵn sàng cao và hiệu năng tốt khi truy cập database thì RDS Proxy là dịch vụ nên cân nhắc.\n"
},
{
	"uri": "/vi/1.-introduction/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "1. Tổng quan Amazon RDS Proxy là một dịch vụ proxy cơ sở dữ liệu được quản lý hoàn toàn bởi AWS, dùng để tối ưu kết nối đến Amazon RDS và Amazon Aurora. Dịch vụ này giúp ứng dụng:\nTăng hiệu năng truy cập cơ sở dữ liệu. Tối ưu hóa việc tái sử dụng kết nối (connection pooling). Giảm độ trễ trong các môi trường serverless như AWS Lambda. Tăng tính sẵn sàng và khả năng phục hồi sau lỗi (failover). 2. Cách Hoạt Động RDS Proxy hoạt động như một lớp trung gian thông minh giữa ứng dụng và cơ sở dữ liệu:\nConnection Pooling: RDS Proxy giữ sẵn một nhóm kết nối đến backend Database. Khi ứng dụng yêu cầu truy cập, RDS Proxy sẽ tái sử dụng kết nối nếu có, hoặc mở mới nếu cần. RDS Proxy quản lý thời gian sống của kết nối, failover, và đóng/mở kết nối theo trạng thái hệ thống. 3. Tính năng nổi bật Tính năng Mô tả 🔁 Connection pooling Giảm số lượng kết nối Database đồng thời, tránh vượt giới hạn ⚡ Tối ưu hóa Lambda/Container Giảm độ trễ khi kết nối Database trong môi trường serverless 🔐 Tích hợp IAM \u0026amp; TLS Bảo mật mạnh mẽ với IAM, Secrets Manager và mã hóa TLS 🛡️ Tự động failover Hỗ trợ chuyển đổi Database backend tự động khi có sự cố 📊 Tích hợp giám sát Kết hợp với CloudWatch để theo dõi hiệu suất 4. Chi phí và khả năng cung cấp khu vực \u0026amp; phiên bản 💰 Chi phí Chi phí của Amazon RDS Proxy được tính dựa trên:\nSố lượng vCPU sử dụng bởi proxy Thời gian hoạt động của proxy (theo giờ) Không tính thêm phí dựa trên số lượng kết nối hay request Bạn vẫn trả chi phí thông thường cho Amazon RDS hoặc Aurora 📘 Xem bảng giá chi tiết\n5. Hạn ngạch và giới hạn cho RDS Proxy Hạng mục Mặc định Số lượng Proxy mỗi tài khoản 20 Target group mỗi Proxy 20 Database instance mỗi Proxy 1 Endpoint mỗi Proxy 1 Timeout lấy kết nối 120 giây (có thể điều chỉnh) Kết nối đồng thời hỗ trợ Hàng ngàn (auto scale) Có thể yêu cầu tăng giới hạn qua AWS Support nếu cần.\nNhững hạn chế bổ sung cho RDS dành cho MariaDB Các hạn chế khi dùng Amazon RDS Proxy với RDS for MariaDB:\nProxy chỉ lắng nghe trên cổng 3306, nhưng vẫn kết nối với Database bằng cổng được cấu hình. ❌ Không hỗ trợ MariaDB tự quản lý trên EC2. ❌ Không hoạt động nếu read_only = 1 trong Database parameter group. ❌ Không hỗ trợ chế độ nén MariaDB (--compress, -C). ❌ Không hỗ trợ plugin xác thực auth_ed25519. ❌ Không hỗ trợ TLS 1.3. ⚠️ GET DIAGNOSTICS có thể trả kết quả không chính xác nếu RDS Proxy tái sử dụng kết nối. ❌ Không hỗ trợ caching_sha2_password (qua ClientPasswordAuthType). ⚠️ Không nên dùng sql_auto_is_null = true trong truy vấn khởi tạo proxy — có thể gây lỗi ứng dụng. Những hạn chế bổ sung cho RDS dành cho Microsoft SQL Server Các hạn chế khi dùng RDS Proxy với RDS for SQL Server:\n⚠️ Số lượng Secrets trong AWS Secrets Manager có thể nhiều nếu SQL Server dùng collation phân biệt chữ hoa/thường. ❌ Không hỗ trợ kết nối sử dụng Active Directory. ❌ IAM authentication không hoạt động với client không hỗ trợ thuộc tính token. ⚠️ Các biến hệ thống như @@IDENTITY, @@ROWCOUNT, SCOPE_IDENTITY() có thể trả sai nếu không được lấy trong cùng một câu lệnh phiên. ❌ Nếu dùng MARS (Multiple Active Result Sets), proxy sẽ không thực thi truy vấn khởi tạo. ❌ Không hỗ trợ phiên bản SQL Server 2014 và SQL Server 2022. ❌ Không hỗ trợ client không xử lý được nhiều thông điệp TLS trong một bản ghi. Những hạn chế bổ sung cho RDS dành cho MySQL Các hạn chế khi dùng Amazon RDS Proxy với RDS for MySQL:\nProxy chỉ lắng nghe trên cổng 3306. ❌ Không hỗ trợ MySQL tự quản lý trên EC2. ❌ Không hoạt động nếu read_only = 1 trong Database parameter group. ❌ Không hỗ trợ chế độ nén MySQL (--compress, -C). ❌ Không hỗ trợ mật khẩu kép (dual password) của MySQL. ❌ Không hỗ trợ client không xử lý nhiều phản hồi trong một bản ghi TLS. ⚠️ GET DIAGNOSTICS có thể trả kết quả sai khi tái sử dụng kết nối. ⚠️ Một số câu lệnh như SET LOCAL có thể thay đổi trạng thái phiên mà không gây ghim. ❌ ROW_COUNT() không hoạt động đúng với truy vấn nhiều câu lệnh. ⚠️ Với driver MySQL 8.4 C, mysql_stmt_bind_named_param() có thể tạo gói lỗi nếu số lượng tham số vượt placeholder. ⚠️ caching_sha2_password yêu cầu TLS và có thể gặp vấn đề với driver Go (go-sql). ⚠️ Không nên dùng sql_auto_is_null = true trong truy vấn khởi tạo. Những hạn chế bổ sung cho RDS dành cho PostgreSQL Các hạn chế khi dùng Amazon RDS Proxy với RDS for PostgreSQL:\nProxy chỉ lắng nghe trên cổng 5432. ❌ Không hỗ trợ lệnh CancelRequest từ client (như Ctrl+C trong psql). ⚠️ Kết quả lastval có thể không chính xác — nên dùng INSERT ... RETURNING. ❌ Không hỗ trợ streaming replication. ⚠️ scram_iterations mặc định là 4096 khi client auth với proxy (PostgreSQL 16). ⚠️ Cần có database mặc định. ⚠️ Nếu dùng ALTER ROLE ... SET ROLE, cần thiết lập SET ROLE lại trong truy vấn khởi tạo để tránh lỗi ghim. ❌ Không hỗ trợ bộ lọc ghim phiên cho PostgreSQL. ✅ Lưu ý: Hạn chế có thể thay đổi theo thời gian. Nên tham khảo tài liệu chính thức Amazon RDS Proxy documentation để cập nhật.\n6. Khái niệm và thuật ngữ RDS Proxy Thuật ngữ Mô tả Proxy endpoint Địa chỉ mà ứng dụng sử dụng thay vì Database endpoint gốc Connection pool Nhóm kết nối được mở sẵn để phục vụ nhiều client Target group Nhóm các Database instances được liên kết với một Proxy IAM Role Vai trò được gán để cấp quyền truy cập Proxy từ Lambda hoặc EC2 Secrets Manager Dịch vụ lưu trữ thông tin đăng nhập Database một cách an toàn 7. Bảo mật Amazon RDS Proxy tích hợp nhiều lớp bảo mật:\nIAM Authentication: ứng dụng xác thực bằng role IAM, không cần hard-code mật khẩu. TLS Encryption: mã hóa toàn bộ đường truyền từ client → proxy → database backend. Secrets Manager: quản lý, xoay vòng và bảo vệ thông tin đăng nhập. VPC Integration: hoạt động trong mạng riêng ảo (VPC), giới hạn truy cập từ nội bộ. 8. Lưu ý RDS Proxy không thay thế database, mà là lớp trung gian tăng hiệu năng và bảo mật. Proxy phải nằm trong cùng VPC với RDS hoặc Aurora. Không hỗ trợ tất cả các phiên bản hoặc cấu hình database (Oracle, SQL Server). Hỗ trợ tốt nhất với ứng dụng sử dụng kết nối ngắn hạn, đồng thời cao như Lambda hoặc microservices. Không nên sử dụng RDS Proxy nếu ứng dụng có ít kết nối và kết nối dài hạn liên tục. 9. Tích hợp với dịch vụ AWS khác Amazon RDS Proxy hoạt động hiệu quả khi được tích hợp với các dịch vụ AWS khác:\nDịch vụ Vai trò tích hợp chính AWS Lambda Kết nối ngắn hạn, scale cao — giảm cold start và timeout khi truy cập Database Amazon ECS / EKS Hỗ trợ truy cập Database ổn định và bảo mật qua proxy từ container Amazon CloudWatch Theo dõi các chỉ số như ConnectionCount, CurrentClientConnections AWS Secrets Manager Tự động xoay vòng và bảo vệ thông tin xác thực AWS IAM Xác thực dựa trên vai trò IAM thay vì mật khẩu hard-code 10. Các chỉ số giám sát (CloudWatch Metrics) RDS Proxy cung cấp một số chỉ số CloudWatch quan trọng để giám sát và chẩn đoán hiệu năng:\nChỉ số Ý nghĩa DatabaseConnections Số lượng kết nối tới Database backend đang được sử dụng ClientConnections Số lượng client kết nối tới proxy CurrentSessionPercent % số phiên đang sử dụng trên tổng số có thể DatabaseConnectionBorrowTimeouts Số lần client không lấy được kết nối trong thời gian timeout ActiveConnections Tổng số kết nối đang được sử dụng tích cực 👉 Có thể thiết lập cảnh báo tự động dựa trên các chỉ số này bằng Amazon CloudWatch Alarms để giám sát chủ động và phản ứng kịp thời với các vấn đề hiệu năng.\n11. Các phương pháp tối ưu khi sử dụng RDS Proxy Để đạt hiệu suất tối đa và đảm bảo độ ổn định khi sử dụng Amazon RDS Proxy, bạn nên áp dụng các phương pháp sau:\n✅ Thiết kế ứng dụng sử dụng kết nối ngắn hạn: Tránh giữ kết nối database lâu một cách không cần thiết. ✅ Sử dụng IAM hoặc Secrets Manager: Tránh hard-code thông tin đăng nhập trong mã nguồn. ✅ Theo dõi thường xuyên các chỉ số CloudWatch: Để phát hiện kịp thời các vấn đề. ✅ Tối ưu các tham số cấu hình Database trong Parameter Group: như thời gian timeout kết nối, autocommit,\u0026hellip;. ✅ Cấu hình truy vấn khởi tạo (Initialization Query) một cách rõ ràng để đảm bảo mỗi kết nối được khởi động với trạng thái mong muốn. 💡 Việc thiết kế tốt các truy vấn khởi tạo và kiểm soát trạng thái kết nối giúp giảm hiện tượng ghim kết nối (pinning) và cải thiện khả năng tái sử dụng kết nối hiệu quả.\n"
},
{
	"uri": "/vi/3.-configuration/3.1-create-application-load-balancer/",
	"title": "Tạo Application Load Balancer",
	"tags": [],
	"description": "",
	"content": "🛠️ Các bước thực hiện 1. Mở dịch vụ EC2 Tìm kiếm và chọn dịch vụ EC2\n2. Tạo Target Groups Vào EC2 \u0026gt; chọn Target groups\nNhấn Create target group\nNhập thông tin:\nBước Specify group details: Phần Basic configuration: Basic configuration \u0026gt; chọn IP addresses Target group name: MyApp-TG Protocol: HTTP, Port: 8080 IP address type \u0026gt; chọn IPv4 VPC chọn MyAPP-VPC Protocol version \u0026gt; chọn HTTP1 Nhấn Next để tiếp tục Bước Register targets: Nhấn Create target group đế tạo 3. Tạo Application Load Balancer Vào EC2 \u0026gt; chọn Load Balancers\nNhấn Create load balancer\nLoad balancer types \u0026gt; chọn Application Load Balancer\nNhập thông tin:\nPhần Basic configuration: Load balancer name: MyApp-ALB Scheme \u0026gt; chọn Internet-facing Load balancer IP address type \u0026gt; chọn IPv4 Phần Network mapping: VPC \u0026gt; chọn MyApp-VPC Availability Zones and subnets: Chọn ap-southeast-1a (apse1-az1) \u0026gt; chọn PublicSubnet1 Chọn ap-southeast-1b (apse1-az1) \u0026gt; chọn PublicSubnet2 Phần Security groups: Security groups \u0026gt; chọn SG-ALB Phần Listeners and routing: Default action \u0026gt; chọn MyApp-TG Nhấn Create load balancer để tạo\n"
},
{
	"uri": "/vi/2.-preparation/1.-create-vpc--subnet/",
	"title": "Tạo VPC và Subnet",
	"tags": [],
	"description": "",
	"content": "Amazon Virtual Private Cloud (VPC) Amazon Virtual Private Cloud (Amazon VPC) cho phép bạn triển khai tài nguyên AWS trong một mạng logic biệt lập mà bạn tự định nghĩa. Nó hoạt động như một trung tâm dữ liệu ảo trong đám mây.\n🛠️ Các bước thực hiện 1️. Truy cập AWS Management Console Truy cập AWS Management Console\nTìm và chọn dịch vụ VPC\n2️. Tạo VPC mới Vào VPC Dashboard \u0026gt; chọn Your VPCs\nNhấn Create VPC\nChọn VPC only\nNhập thông tin:\nName tag: MyApp-VPC IPv4 CIDR block: 10.0.0.0/16 Tenancy: Default Nhấn Create VPC\n📌 Giải thích:\nCIDR 10.0.0.0/16 cho phép bạn chia nhỏ thành nhiều subnet. Tenancy: Default giúp tiết kiệm chi phí và không giới hạn loại EC2 instance. 3️. Bật DNS cho VPC Vào lại Your VPCs\nChọn VPC vừa tạo \u0026gt; Actions \u0026gt; Edit VPC settings\nBật:\n✅ Enable DNS hostnames ✅ Enable DNS resolution Nhấn Save 4️. Tạo Subnet 4.1 Tạo PublicSubnet1 Vào VPC Dashboard \u0026gt; chọn Subnets Nhấn Create subnet Nhập thông tin: VPC ID \u0026gt; chọn MyApp-VPC Subnet name: PublicSubnet1 Nhấn Availability Zone \u0026gt; chọn ap-southeast-1a IPv4 subnet CIDR block: 10.0.1.0/24 Nhấn Create subnet 4.2 Tạo PublicSubnet2 Vào VPC Dashboard \u0026gt; chọn Subnets Nhấn Create subnet Nhập thông tin: VPC ID \u0026gt; chọn MyApp-VPC Subnet name: PublicSubnet2 Nhấn Availability Zone \u0026gt; chọn ap-southeast-1b IPv4 subnet CIDR block: 10.0.4.0/24 Nhấn Create subnet 4.3 Tạo PrivateSubnet1 Vào VPC Dashboard \u0026gt; chọn Subnets Nhấn Create subnet Nhập thông tin: VPC ID \u0026gt; chọn MyApp-VPC Subnet name: PrivateSubnet1 Nhấn Availability Zone \u0026gt; chọn ap-southeast-1b IPv4 subnet CIDR block: 10.0.2.0/24 Nhấn Create subnet 4.4 Tạo PrivateSubnet2 Vào VPC Dashboard \u0026gt; chọn Subnets Nhấn Create subnet Nhập thông tin: VPC ID \u0026gt; chọn MyApp-VPC Subnet name: PrivateSubnet2 Nhấn Availability Zone \u0026gt; chọn ap-southeast-1c IPv4 subnet CIDR block: 10.0.3.0/24 Nhấn Create subnet "
},
{
	"uri": "/vi/2.-preparation/2.-cretae-internet-gateway--nat-gateway/",
	"title": "Cấu hình Internet Gateway &amp; NAT Gateway",
	"tags": [],
	"description": "",
	"content": "🛠️ Các bước thực hiện 1. Tạo Internet Gateway (IGW) Vào VPC Dashboard \u0026gt; chọn Internet Gateways\nNhấn Create internet gateway\nNhập thông tin:\nName tag: MyApp-IGW Nhấn Create internet gateway\nSau khi tạo xong, chọn MyApp-IGW \u0026gt; nhấn Actions \u0026gt; chọn Attach to VPC\nChọn MyApp-VPC \u0026gt; nhấn Attach internet gateway\n📌 Giải thích:\nInternet Gateway cho phép các subnet public truy cập Internet. 2. Tạo NAT Gateway Vào VPC Dashboard \u0026gt; chọn NAT Gateways\nNhấn Create NAT Gateway\nNhập thông tin:\nName: MyApp-NAT Nhấn Subnet: chọn PublicSubnet1 Elastic IP allocation ID: chọn Allocate Elastic IP Nhấn Create NAT Gateway\n📌 Giải thích:\nNAT Gateway giúp các subnet private truy cập Internet (ví dụ: để cập nhật hệ thống, tải package). "
},
{
	"uri": "/vi/2.-preparation/",
	"title": "Chuẩn bị",
	"tags": [],
	"description": "",
	"content": "Thiết Lập Môi Trường AWS Tài liệu này hướng dẫn các bước cần thiết để thiết lập hạ tầng AWS trước khi triển khai các dịch vụ như ECS, RDS và RDS Proxy.\nNội Dung 1. Tạo VPC và Subnet 2. Tạo Internet Gateway và NAT Gateway 3. Tạo Route Tables 4. Tạo Security Groups 5. Tạo RDS Instance 6. Sử Dụng AWS Secrets Manager 7. Gán IAM Role cho ECS và RDS Proxy 8. Tạo RDS Proxy 1. Tạo VPC và Subnet Bước 1: Tạo một VPC mới với CIDR 10.0.0.0/16. Bước 2: Tạo bốn subnet: PublicSubnet1: dùng cho ALB và NAT Gateway (VD: 10.0.1.0/24) PublicSubnet2: dùng cho ALB và NAT Gateway (VD: 10.0.4.0/24) PrivateSubnet1: dùng cho ECS, RDS và RDS Proxy (VD: 10.0.2.0/24) PrivateSubnet2: dùng cho ECS, RDS và RDS Proxy (VD: 10.0.3.0/24) 2. Tạo Internet Gateway và NAT Gateway Bước 1: Tạo và gắn Internet Gateway (IGW) vào VPC. Bước 2: Tạo NAT Gateway trong PublicSubnet1, gán Elastic IP. Bước 3: Cấu hình bảng định tuyến: Subnet public → IGW để truy cập Internet trực tiếp. Subnet private → NAT Gateway để truy cập Internet gián tiếp. 3. Tạo Route Tables Tạo 2 bảng định tuyến: MyApp-Public-RT: gán cho các public subnet, định tuyến ra Internet thông qua IGW. MyApp-Private-RT: gán cho private subnet, định tuyến ra NAT Gateway. 4. Tạo Security Groups Bước 1: Tạo SG-ALB cho phép truy cập HTTP/HTTPS (cổng 80/443) từ Internet. Bước 2: Tạo SG-ECS cho phép ALB truy cập vào ECS (cổng 8080). Bước 3: Tạo SG-RDSProxy cho phép ECS truy cập RDS Proxy (cổng 3306). Bước 4: Tạo SG-RDS cho phép ECS và Proxy truy cập Database. 5. Tạo RDS Instance Bước 1: Tạo DB Subnet Group. Bước 2: Triển khai DB trong PrivateSubnet1 và PrivateSubnet2. Bước 3: Chọn loại cơ sở dữ liệu MySQL. Bước 4: Gán Security Group SG-RDS. 6. Sử Dụng Secrets Manager Bước 1: Tạo secret trong AWS Secrets Manager để lưu thông tin đăng nhập DB dưới dạng JSON. Bước 2: Ghi lại ARN của secret để sử dụng trong cấu hình ECS Task. 7. Gán IAM Role Bước 1: Tạo IAM role: ecsTaskExecutionRole, codeDeployServiceRole và rdsProxyServiceRole Bước 2: Gán policy cho phép: Truy cập Secrets Manager Kết nối tới RDS Database Ghi log lên CloudWatch 8. Tạo RDS Proxy Bước 1: Tạo một RDS Proxy để kết nối ứng dụng ECS đến RDS. Bước 2: Chọn RDS instance đã tạo. Bước 3: Gán IAM role rdsProxyServiceRole cho RDS Proxy. Bước 4: Chọn Subnet PrivateSubnet1 và PrivateSubnet2. Bước 5: Gán Security group SG-RDSProxy. Hãy đảm bảo các thành phần trên được cấu hình đầy đủ trước khi tiến hành triển khai ECS và thiết lập kết nối đến RDS Proxy.\n"
},
{
	"uri": "/vi/3.-configuration/3.2-deploying-application-on-ecs/",
	"title": "Triển khai ứng dụng trên ECS",
	"tags": [],
	"description": "",
	"content": "🛠️ Các bước thực hiện 1. Mở dịch vụ Elastic Container Service Tìm kiếm và chọn dịch vụ Elastic Container Service\n2. Tạo Task Definition Chuẩn bị:\nTruy cập AWS Aurora and RDS Chọn Databases \u0026gt; Mở MyApp-RDS Ghi nhớ giá trị Endpoint cho DB_HOST Truy cập AWS Aurora and RDS\nChọn Proxies \u0026gt; Mở MyApp-RDS-Proxy Ghi nhớ giá trị Proxy endpoints cho DB_PROXY_HOST Truy cập AWS Secrets Manager\nChọn MyAPP-Secret Ghi nhớ giá trị Secret ARN cho DB_USER và DB_PASS Truy cập JWT Secret Key Generator Chọn Generated Key Ghi nhớ giá trị Generated Secret Key cho JWT_SECRET Truy cập Google Cloud Console Ghi nhớ giá trị Client ID cho GOOGLE_CLIENT_ID Ghi nhớ giá trị Client secret cho GOOGLE_CLIENT_SECRET Video hướng dẫn: Truy cập Cloudinary Console Ghi nhớ giá trị Cloud name cho CLOUD_NAME Ghi nhớ giá trị API Key cho CLOUD_API_KEY Ghi nhớ giá trị API Secret cho CLOUD_API_SECRET Video hướng dẫn: Vào Amazon Elastic Container Service \u0026gt; chọn Task definitions Nhấn Create new task definition \u0026gt; chọn Create new task definition Nhập thông tin:\nPhần Task definition configuration: Task definition family: MyApp-Task Phần Infrastructure requirements: Launch type \u0026gt; chọn AWS Fargate CPU \u0026gt; chọn 1 vCPU Memory \u0026gt; chọn 2 GB Task role \u0026gt; chọn ecsTaskExecutionRole Phần Container: Container - 1: Name: api_gateway Image URI: thanhtran2k3it/api_gateway:latest Container port: 8080 Environment variables: Key: AUTH_API, Value type \u0026gt; chọn Value, Value: http://localhost:8081 Key: USER_API, Value type \u0026gt; chọn Value, Value: http://localhost:8082 Key: FILE_API, Value type \u0026gt; chọn Value, Value: http://localhost:8083 Key: DB_HOST, Value type \u0026gt; chọn Value, Value: myapp-rds.c3aaekemgmo1.ap-southeast-1.rds.amazonaws.com:3306 Key: DB_USER, Value type \u0026gt; chọn Value, ValueFrom: arn:aws:secretsmanager:ap-southeast-1:329178086719:secret:MyAPP-Secret-9taxTT:username:: Key: DB_PASS, Value type \u0026gt; chọn Value, ValueFrom: arn:aws:secretsmanager:ap-southeast-1:329178086719:secret:MyAPP-Secret-9taxTT:password:: Trong Logging - optional \u0026gt; chọn Use log collection Nhấn Add container để thêm\nContainer - 2:\nName: auth_service Image URI: thanhtran2k3it/auth_service:latest Container port: 8081 Environment variables: Key: DB_PROXY_HOST, Value type \u0026gt; chọn Value, Value:\nmyapp-rds-proxy.proxy-c3aaekemgmo1.ap-southeast-1.rds.amazonaws.com:3306 Key: DB_USER, Value type \u0026gt; chọn ValueFrom, Value: arn:aws:secretsmanager:ap-southeast-1:329178086719:secret:MyAPP-Secret-9taxTT:username:: Key: DB_PASS, Value type \u0026gt; chọn ValueFrom, Value: arn:aws:secretsmanager:ap-southeast-1:329178086719:secret:MyAPP-Secret-9taxTT:password:: Key: JWT_SECRET, Value type \u0026gt; chọn Value, Value: HfX2n9hmoHctYOcpdobNBQprMUqnHgecolNCG8EtRvkwV9Ixv3aRpy3RxGjdydlt4Jmbna9b5r2pqTXlcMoDY88qSAj1GHtPsrJ5LGTkodAe8dgK07CPIf27LdvAIg17hWv1ndwRI0JCXyR7jw0t6MEANXyxSz9m7lo0gww1iV4NRFk3tlXwFPYJ6OvddCTLxxh5AGYeTt2QhsvHWYlguf0OPy2Wc1o1bLs6FFSrBARHqwOWpyjQiqeItHHesWpL Key: GOOGLE_CLIENT_ID, Value type \u0026gt; chọn Value, Value: ........ Key: GOOGLE_CLIENT_SECRET, Value type \u0026gt; chọn Value, Value: ......... Key: HOST_NAME, Value type \u0026gt; chọn Value, Value: http://localhost:8080 Trong Logging - optional \u0026gt; chọn Use log collection Trong Startup dependency ordering - optional \u0026gt; chọn Add container dependency: Container \u0026gt; chọn api_gateway Condition \u0026gt; chọn START Nhấn Add container để thêm\nContainer - 3:\nName: user_service Image URI: thanhtran2k3it/user_service:latest Container port: 8082 Environment variables: Key: DB_PROXY_HOST, Value type \u0026gt; chọn Value, Value:\nmyapp-rds-proxy.proxy-c3aaekemgmo1.ap-southeast-1.rds.amazonaws.com:3306 Key: DB_USER, Value type \u0026gt; chọn ValueFrom, Value: arn:aws:secretsmanager:ap-southeast-1:329178086719:secret:MyAPP-Secret-9taxTT:username:: Key: DB_PASS, Value type \u0026gt; chọn ValueFrom, Value: arn:aws:secretsmanager:ap-southeast-1:329178086719:secret:MyAPP-Secret-9taxTT:password:: Key: JWT_SECRET, Value type \u0026gt; chọn Value, Value: HfX2n9hmoHctYOcpdobNBQprMUqnHgecolNCG8EtRvkwV9Ixv3aRpy3RxGjdydlt4Jmbna9b5r2pqTXlcMoDY88qSAj1GHtPsrJ5LGTkodAe8dgK07CPIf27LdvAIg17hWv1ndwRI0JCXyR7jw0t6MEANXyxSz9m7lo0gww1iV4NRFk3tlXwFPYJ6OvddCTLxxh5AGYeTt2QhsvHWYlguf0OPy2Wc1o1bLs6FFSrBARHqwOWpyjQiqeItHHesWpL Key: HOST_NAME, Value type \u0026gt; chọn Value, Value: http://localhost:8080 Trong Logging - optional \u0026gt; chọn Use log collection Trong Startup dependency ordering - optional \u0026gt; chọn Add container dependency: Container \u0026gt; chọn api_gateway Condition \u0026gt; chọn START Nhấn Add container để thêm\nContainer - 4:\nName: file_service Image URI: thanhtran2k3it/file_service:latest Container port: 8083 Environment variables: Key: CLOUD_NAME, Value type \u0026gt; chọn Value, Value: ............ Key: CLOUD_API_KEY, Value type \u0026gt; chọn Value, Value: ............ Key: CLOUD_API_SECRET, Value type \u0026gt; chọn Value, Value: ............ Trong Logging - optional \u0026gt; chọn Use log collection Nhấn Create để tạo\n3. Tạo ECS Cluster Vào Amazon Elastic Container Service \u0026gt; chọn Clusters\nNhấn Create cluster\nNhập thông tin:\nPhần Cluster configuration:\nCluster name: Myapp-Cluster Phần Infrastructure - optional Info:\nChọn AWS Fargate (serverless) Nhấn Create để tạo\n3. Tạo Service Vào Amazon Elastic Container Service \u0026gt; chọn Clusters\nChọn Myapp-Cluster\nMở Tab Services \u0026gt; chọn Create\nNhập thông tin:\nPhần Service details: Task definition family \u0026gt; chọn MyApp-Task Service name: MyApp-Service Phần Environment: Compute options \u0026gt; chọn Launch type Launch type \u0026gt; chọn FARGATE Platform version \u0026gt; chọn LATEST Phần Networking: VPC \u0026gt; chọn MyApp-VPC Subnets \u0026gt; chọn PrivateSubnet1 và PrivateSubnet2 Security group \u0026gt; chọn SG-ECS Public IP \u0026gt; chọn Turn on Phần Load balancing: Chọn Use load balancing Load balancer type \u0026gt; chọn Application Load Balancer Container \u0026gt; chọn api_gateway 8080:8080 Load balancer \u0026gt; chọn MyApp-ALB Listener \u0026gt; chọn HTTP:80 Target group \u0026gt; chọn MyApp-TG Nhấn Create để tạo\n"
},
{
	"uri": "/vi/2.-preparation/3.create-route-tables/",
	"title": "Tạo Route Table",
	"tags": [],
	"description": "",
	"content": "🛠️ Các bước thực hiện 1. Tạo Route Table cho Public Subnet Vào VPC Dashboard \u0026gt; chọn Route Tables\nNhấn Create route table\nNhập thông tin:\nName tag: MyApp-Public-RT Nhấn VPC: chọn MyApp-VPC Nhấn Create route table\nChọn route table vừa tạo \u0026gt; tab Routes \u0026gt; nhấn Edit routes\nNhấn Add route Destination: 0.0.0.0/0 Target: chọn Internet Gateway (MyApp-IGW) Nhấn Save changes Chọn tab Subnet associations \u0026gt; Edit subnet associations\nClick chọn PublicSubnet1 và PublicSubnet2 Nhấn Save associations 2. Tạo Route Table cho Private Subnet Nhấn Create route table\nNhập thông tin:\nName tag: MyApp-Private-RT Nhấn VPC: chọn MyApp-VPC Nhấn Create route table\nChọn route table vừa tạo \u0026gt; tab Routes \u0026gt; Edit routes\nNhấn Add route Destination: 0.0.0.0/0 Target: chọn NAT Gateway (MyApp-NAT) Nhấn Save changes Chọn tab Subnet associations \u0026gt; Edit subnet associations\nClick chọn PrivateSubnet1 và PrivateSubnet2 Nhấn Save associations "
},
{
	"uri": "/vi/3.-configuration/3.3-deploying-a-static-website/",
	"title": "Triển khai static website",
	"tags": [],
	"description": "",
	"content": "🛠️ Các bước thực hiện 1. Chuẩn bị Truy cập EC2\nChọn Load Balancers \u0026gt; Mở MyApp-ALB Ghi nhớ giá trị Load balancer ARN Truy cập Git\nTải về rồi tiến hành cài đặt\nSau khi cài xong, mở Git Bash hoặc Command Prompt để sử dụng.\ngit clone https://github.com/ThanhTran2k3/workshop_rds_proxy_FE.git cd workshop_rds_proxy_FE Mở file config.json\nnotepad config.json Thay đổi giá trị API_URL: giá trị Load balancer ARN\nLưu lại file config.json.\n1. Mở dịch vụ S3 Tìm kiếm và chọn dịch vụ S3\n2. Tạo Bucket Vào Amazon S3 \u0026gt; chọn General purpose buckets\nNhấn Create bucket\nNhập thông tin:\nPhần General configuration: Bucket name: myapp-s3-3291 ⚠️ Lưu ý: Bucket name phải duy nhất, không được trùng với bất kỳ tên bucket nào khác trên AWS và không được viết hoa. Phần Block Public Access settings for this bucket: Bỏ chọn Block all public access Chọn I acknowledge that the current settings might result in this bucket and the objects within becoming public. Nhấn Create bucket\n3. Upload file Vào Amazon S3 \u0026gt; chọn General purpose buckets\nMở myapp-s3-3291\nChọn Upload\nAdd các file trong thư mục workshop_rds_proxy_FE\nNhấn Upload\n4. Cấu hình bucket cho website hosting Mở myapp-s3-3291\nVào tab Properties\nPhần Static website hosting \u0026gt; nhấn Edit\nNhập thông tin: Static website hosting \u0026gt; chọn Enable Hosting type \u0026gt; chọn Host a static website Index document \u0026gt; nhập index.html Error document \u0026gt; nhập index.html Nhấn Save changes 5. Cấp quyền public cho website Mở myapp-s3-3291\nVào tab Permissions\nPhần Bucket policy \u0026gt; nhấn chọn Edit\nDán đoạn JSON vào Policy\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;PublicReadGetObject\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:GetObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::your-bucket-name/*\u0026#34; } ] } Nhấn Save changes\nVào tab Properties\nDán Bucket website endpoint vào trình duyệt để kiểm tra\n"
},
{
	"uri": "/vi/3.-configuration/",
	"title": "Cấu hình",
	"tags": [],
	"description": "",
	"content": "Nội Dung 1. Tạo Application Load Balancer 2. Triển khai ứng dụng trên ECS 3. Triển khai static website 4. Cấu hình CloudFront 1. Tạo Application Load Balancer Bước 1: Tạo Target Group. Bước 2: Tạo ALB để phân phối lưu lượng truy cập đến các container ECS. Bước 3: Chọn Subnet PublicSubnet1 và PublicSubnet2. Bước 4: Gán Security Group SG-ALB. 2. Triển khai ứng dụng trên ECS Bước 1: Tạo ECS Cluster. Bước 2: Tạo Task Definition, chỉ định container, port, CPU, memory. Bước 3: Tạo Service, chọn loại FARGATE, chỉ định Task Definition. Bước 4: Gán Application Load Balancer vào Service để phân phối traffic. 3. Triển khai static website Bước 1: Truy cập dịch vụ S3 và tạo một bucket mới. Bước 2: Upload source static (HTML/CSS/JS) lên S3 bucket. Bước 3: Bật chế độ static website hosting cho bucket. Bước 4: Cấu hình Bucket Policy để public file nếu cần. 4. Cấu hình CloudFront Bước 1: Truy cập dịch vụ CloudFront, tạo mới một Distribution. Bước 2: Chọn origin là S3 và ALB. Bước 3: Cấu hình custom error responses. Bước 4: Copy domain name CloudFront để sử dụng làm website URL chính. "
},
{
	"uri": "/vi/3.-configuration/3.4-configure-cloudfront/",
	"title": "Cấu hình CloudFront",
	"tags": [],
	"description": "",
	"content": "🛠️ Các bước thực hiện 1. Chặn tất cả truy cập công cộng vào S3 Mở myapp-s3-3291\nVào tab Permissions\nPhần Block public access (bucket settings) \u0026gt; nhấn chọn Edit\nChọn Block all public access\nNhấn Save changes\n2. Mở dịch vụ Amazon CloudFront Tìm kiếm và chọn dịch vụ CloudFront\n3. Tạo Distribution Vào Amazon CloudFront \u0026gt; chọn Distributions\nNhấn Create distribution\nNhập thông tin:\nBước Get started: Distribution name: MyApp-Distribution Nhấn Next để tiếp tục Bước Configure distribution: Origin type \u0026gt; chọn Amazon S3 S3 origin \u0026gt; nhấn chọn Browse S3 chọn myapp-s3-3291 Bấm Next để tiếp tục Bước Enable security: Web Application Firewall (WAF) \u0026gt; chọn Do not enable security protections Nhấn Next để tiếp tục Bước Review and create: Nhấn Create distribution để tạo 4. Cập nhập Distribution Vào Amazon CloudFront \u0026gt; chọn Distributions\nMở distribution vừa tạo\nVào tab Origins:\nChọn http://myapp-s3-3291.s3-website-ap-southeast-1.amazonaws.com Nhấn Edit Phần Settings: Origin access \u0026gt; chọn Origin access control settings (recommended) Nhấn chọn Create new OAC Nhấn Create Nhấn Save changes Vào tab General:\nNhấn chọn Edit Phần Settings: Default root object - optional: index.html Nhấn Save changes Vào tab Error pages:\nNhấn chọn Create custom error response Phần Error response: HTTP error code \u0026gt; chọn 403: Forbidden Customize error response \u0026gt; chọn Yes Response page path: /index.html HTTP Response code \u0026gt; chọn 200: OK Nhấn Create custom error response 5. Cập nhập S3 Policy Vào Amazon S3 \u0026gt; chọn General purpose buckets\nMở myapp-s3-3291\nVào tab Permissions\nPhần Bucket policy \u0026gt; nhấn chọn Edit\nDán đoạn JSON vào Policy\n{ \u0026#34;Version\u0026#34;: \u0026#34;2008-10-17\u0026#34;, \u0026#34;Id\u0026#34;: \u0026#34;PolicyForCloudFrontPrivateContent\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;AllowCloudFrontServicePrincipal\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: { \u0026#34;Service\u0026#34;: \u0026#34;cloudfront.amazonaws.com\u0026#34; }, \u0026#34;Action\u0026#34;: \u0026#34;s3:GetObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::your-bucket-name/*\u0026#34;, \u0026#34;Condition\u0026#34;: { \u0026#34;StringEquals\u0026#34;: { \u0026#34;AWS:SourceArn\u0026#34;: \u0026#34;arn:aws:cloudfront::329178086719:distribution/your-distributions-ID\u0026#34; } } } ] } Nhấn Save changes\n6. Cấu hình truy cập AWS ALB qua CloudFront Vào Amazon CloudFront \u0026gt; chọn Distributions\nMở distribution vừa tạo\nVào tab Origins:\nNhấn Create origin Trong Settings Origin domain \u0026gt; chọn MyApp-ALB Protocol \u0026gt; chọn HTTP only HTTP port: 80 Nhấn Create origin để tạo Vào tab Behaviors:\nNhấn Create behavior Trong Settings Path pattern \u0026gt; chọn /api/* Origin and origin groups \u0026gt; chọn MyApp-ALB Viewer protocol policy \u0026gt; chọn Redirect HTTP to HTTPS Allowed HTTP methods \u0026gt; chọn GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE Cache policy \u0026gt; chọn CachingDisabled Origin request policy - optional \u0026gt; chọn AllViewerExceptHostHeader Nhấn Create behavior để tạo 7. Cập nhật file config.json Chuẩn bị:\nTruy cập AWS Cloud Front Chọn Distributions \u0026gt; Mở distribution vừa tạo Ghi nhớ giá trị Distribution domain name Mở Amazon S3 \u0026gt; chọn General purpose buckets\nMở myapp-s3-3291\nTrong tab Objects\nChọn file config.json \u0026gt; nhấn chọn Download Mở file config.json đã tải về\nThay đổi giá trị API_URL: giá trị Distribution domain name\nLưu file và upload lên S3 lại\nTrong tab Objects\nNhấn chọn Upload Chọn file config.json đã sửa Nhấn Upload để tải lên 8. Kiểm tra Website Dán Distribution domain name vào trình duyệt để kiểm tra\nKiểm tra một số tính năng gọi đến backend trên ecs\n"
},
{
	"uri": "/vi/2.-preparation/4.-create-security-groups/",
	"title": "Tạo Security Group",
	"tags": [],
	"description": "",
	"content": "🛠️ Các bước thực hiện 1. Tạo SG-ALB Vào VPC Dashboard \u0026gt; chọn Security Groups.\nNhấn Create Security Group.\nNhập thông tin:\nSecurity group name: SG-ALB Description: Allow HTTP/HTTPS from Internet VPC: chọn VPC bạn đã tạo (MyApp-VPC) Phần Inbound rules, nhấn Add rule:\nType: HTTP, Port: 80, Source: 0.0.0.0/0 Type: HTTPS, Port: 443, Source: 0.0.0.0/0 Nhấn Create Security Group.\n2. Tạo SG-ECS Vào VPC Dashboard \u0026gt; chọn Security Groups.\nNhấn Create Security Group.\nNhập thông tin:\nSecurity group name: SG-ECS Description: Allow traffic from ALB to ECS VPC: MyApp-VPC Phần Inbound rules, nhấn Add rule:\nType: Custom TCP, Port: 8080, Source: SG-ALB Nhấn Create Security Group\n3. Tạo SG-RDSProxy Vào VPC Dashboard \u0026gt; chọn Security Groups.\nNhấn Create Security Group.\nNhập thông tin:\nSecurity group name: SG-RDSProxy Description: Allow ECS to access RDS Proxy VPC: MyApp-VPC Phần Inbound rules, nhấn Add rule:\nType: MYSQL/Aurora, Port: 3306, Source: SG-ECS Nhấn Create Security Group\n4. Tạo SG-RDS Vào VPC Dashboard \u0026gt; chọn Security Groups.\nNhấn Create Security Group.\nNhập thông tin:\nSecurity group name: SG-RDS Description: Allow RDS Proxy to access DB VPC: MyApp-VPC Phần Inbound rules, nhấn Add rule:\nType: MYSQL/Aurora, Port: 3306, Source: SG-RDSProxy Type: MYSQL/Aurora, Port: 3306, Source: SG-ECS Nhấn Create Security Group\n"
},
{
	"uri": "/vi/2.-preparation/5.-create-rds-instance/",
	"title": "Tạo RDS database instance",
	"tags": [],
	"description": "",
	"content": "🛠️ Các bước thực hiện 1. Mở dịch vụ RDS Tìm kiếm và chọn dịch vụ Aurora and RDS\n2. Tạo DB Subnet Group. Vào Aurora and RDS \u0026gt; chọn Subnet groups\nNhấn Create DB subnet group\nNhập thông tin:\nName: MyApp-RDSSG Description: Subnet group for RDS MySQL VPC \u0026gt; chọn MyApp-VPC Availability Zone \u0026gt; chọn ap-southeast-1b và ap-southeast-1c Subnets \u0026gt; chọn PrivateSubnet1 và PrivateSubnet2 Nhấn Create\n2. Tạo database Vào Aurora and RDS \u0026gt; chọn Databases\nNhấn Create database\nNhập thông tin:\nChoose a database creation method \u0026gt; chọn Standard create Phần Engine options: Engine type\u0026gt; chọn MySQL Phần Templates \u0026gt; chọn Dev/Test Phần Availability and durability: Deployment options \u0026gt; chọn Multi-AZ DB instance deployment (2 instances) Phần Settings: DB instance identifier: MyApp-RDS Master username: admin Credentials management \u0026gt; chọn Self managed Master password tự đặt Phần Instance configuration: DB instance class\u0026gt; chọn Burstable classes (includes t classes) \u0026gt; chọn db.t3.micro Phần Storage: Storage type\u0026gt; chọn General Purpose SSD (gp2) Allocated storage: 20 Phần Connectivity: Compute resource\u0026gt; chọn Don’t connect to an EC2 compute resource Virtual private cloud (VPC)\u0026gt; chọn MyApp-VPC DB subnet group\u0026gt; chọn MyApp-RDSSG Existing VPC security groups\u0026gt; chọn SG-RDS Nhấn Create database\n"
},
{
	"uri": "/vi/2.-preparation/6.-create-secrets-manager/",
	"title": "Tạo Secrets Manager",
	"tags": [],
	"description": "",
	"content": "🛠️ Các bước thực hiện 1. Mở dịch vụ Secrets Manager Tìm kiếm và chọn dịch vụ Secrets Manager\n2. Tạo Secrets Vào AWS Secrets Manager \u0026gt; chọn Secrets\nNhấn Store a new secret\nBước Choose secret type:\nSecret type \u0026gt; chọn Credentials for RDS database Phần Credentials: User name: admin Password: your-password ✅ Hoặc chọn Other type of secrets và nhập thủ công dữ liệu JSON:\n{ \u0026#34;username\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;your-password\u0026#34; } Phần Database \u0026gt; chọn MyApp-RDS\nNhấn Next để tiếp tục\nBước Configure secret:\nSecret name: MyAPP-Secret Description: MySQL database credentials Nhấn Next để tiếp tục Bước Configure rotation:\nNhấn Next để tiếp tục Bước Review:\nNhấn Store để tạo "
},
{
	"uri": "/vi/2.-preparation/7.-create-iam-role/",
	"title": "Tạo IAM Role",
	"tags": [],
	"description": "",
	"content": "🛠️ Các bước thực hiện 1. Tạo Policy 1.1. Tạo Policy cho ECS Task Tìm và chọn dịch vụ IAM\nVào Identity and Access Management (IAM) \u0026gt; chọn Policies\nNhấn Create policy.\nBước Specify permissions\nChuyển sang tab JSON và dán nội dung sau: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;secretsmanager:GetSecretValue\u0026#34;, \u0026#34;rds-db:connect\u0026#34;, \u0026#34;logs:CreateLogStream\u0026#34;, \u0026#34;logs:PutLogEvents\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; } ] } Nhấn Next để tiếp tục Bước Review and create\nNhập thông tin: Policy name: ecsTaskRDSAccessPolicy Nhấn Create policy\n1.2. Tạo Policy cho RDS Proxy Vào Identity and Access Management (IAM) \u0026gt; chọn Policies\nNhấn Create policy.\nBước Specify permissions\nChuyển sang tab JSON và dán nội dung sau: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;secretsmanager:GetSecretValue\u0026#34;, \u0026#34;secretsmanager:DescribeSecret\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; } ] } Nhấn Next để tiếp tục Bước Review and create\nNhập thông tin: Policy name: rdsProxyAccessPolicy Nhấn Create policy\n2. Tạo Role cho ECS Task Vào Identity and Access Management (IAM) \u0026gt; chọn Roles\nNhấn Create role.\nBước Select trusted entity\nClick chọn AWS service Phần Use case Service or use case: chọn Elastic Container Service Use case: chọn Elastic Container Service Task Nhấn Next để tiếp tục. Bước Add permissions\nTìm kiếm ecsTaskRDSAccessPolicy \u0026gt; click chọn Nhấn Next để tiếp tục. Bước Name, review, and create\nRole name: ecsTaskExecutionRole Description: Secrets Manager and RDS Proxy access permissions for ECS Task Nhấn Create role\n3. Tạo CodeDeploy Role Vào Identity and Access Management (IAM) \u0026gt; chọn Roles\nNhấn Create role.\nBước Select trusted entity\nClick chọn AWS service Phần Use case Service or use case: chọn CodeDeploy Use case: chọn CodeDeploy - ECS Nhấn Next để tiếp tục. Bước Add permissions\nNhấn Next để tiếp tục. Bước Name, review, and create\nRole name: codeDeployServiceRole Description: Allows AWS CodeDeploy to manage deployments to Amazon ECS services, including creating and updating task definitions and ECS service configurations. Nhấn Create role 4. Tạo Role cho RDS Proxy Vào Identity and Access Management (IAM) \u0026gt; chọn Roles\nNhấn Create role.\nBước Select trusted entity\nClick chọn AWS service Phần Use case Service or use case: chọn RDS Use case: chọn RDS - Add Role to Database Nhấn Next để tiếp tục. Bước Add permissions\nTìm kiếm rdsProxyAccessPolicy \u0026gt; click chọn Nhấn Next để tiếp tục. Bước Name, review, and create\nRole name: rdsProxyServiceRole Description: Role used by Amazon RDS Proxy to retrieve database credentials from AWS Secrets Manager Nhấn Create role "
},
{
	"uri": "/vi/2.-preparation/8.-create-rds-proxy/",
	"title": "Tạo RDS Proxy",
	"tags": [],
	"description": "",
	"content": "🛠️ Các bước thực hiện 1. Mở dịch vụ RDS Tìm kiếm và chọn dịch vụ Aurora and RDS\n2. Tạo RDS Proxy Vào Aurora and RDS \u0026gt; chọn Proxies\nNhấn Create proxy\nNhập thông tin:\nPhần Proxy configuration: Engine family\u0026gt; chọn MariaDB and MySQL Proxy identifier: MyApp-RDS-Proxy Phần Target group configuration: Database \u0026gt; chọn MyApp-RDS Connection pool maximum connections: 20 Phần Authentication: Identity and access management (IAM) role \u0026gt; chọn rdsProxyServiceRole Secrets Manager secrets \u0026gt; chọn MyAPP-Secret Client authentication type \u0026gt; chọn MySQL Native password Phần Connectivity: Subnets \u0026gt; chọn PrivateSubnet1 và PrivateSubnet2 Trong Additional connectivity configuration: VPC security group \u0026gt; chọn SG-RDSProxy Nhấn Create proxy để tạo\n"
},
{
	"uri": "/vi/4.-clean-up-resources/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": "Tài nguyên dọn dẹp ℹ️ Thông tin: Việc dọn dẹp tài nguyên AWS đúng cách sau khi hoàn thành bài lab là điều cần thiết để tránh phát sinh chi phí bất ngờ cho tài khoản AWS của bạn. Hãy làm theo các bước sau để đảm bảo tất cả tài nguyên đã được chấm dứt và xóa.\n🛠️ Các bước thực hiện 1. Dọn dẹp CloudFront Truy cập AWS CloudFont\nChọn Distributions \u0026gt; chọn distribution đã tạo Nhấn chọn Disable, thao tác này sẽ mất vài phút. Sau khi tắt hoàn tất nhấn chọn Delete Chọn Origin access \u0026gt; chọn Origin access controls đã sinh Nhấn chọn Delete 2. Dọn dẹp S3 bucket Truy cập AWS S3\nChọn General purpose buckets \u0026gt; mở bucket đã tạo Chọn tất cả file trong bucket Nhấn chọn Delete To confirm deletion, type permanently delete in the text input field.: permanently delete Nhấn chọn Delete objects Quay về General purpose buckets \u0026gt; chọn bucket đã tạo Nhấn chọn Delete To confirm deletion, enter the name of the bucket in the text input field.: your-bucket-name Nhấn chọn Delete bucket 3. Dọn dẹp ECS Truy cập AWS ECS\nChọn Clusters \u0026gt; mở Myapp-Cluster Trong tab Services Chọn MyApp-Service \u0026gt; Nhấn chọn Delete service Chọn Force delete To confirm deletion, enter delete in the text input field.: delete Nhấn chọn Delete Nhấn chọn Delete cluster Enter the phrase \u0026ldquo;delete Myapp-Cluster\u0026rdquo; to confirm deletion.: delete Myapp-Cluster Nhấn chọn Delete, thao tác này sẽ mất vài phút. Chọn Task definitions \u0026gt; mở MyApp-Task Chọn tất cả Task definition: revision Chọn Actions \u0026gt; nhấn chọn Deregister 4. Dọn dẹp Application Load Balancer và Target Groups Truy cập EC2\nChọn Load Balancers \u0026gt; chọn MyApp-ALB Nhấn chọn Actions \u0026gt; chọn Delete load balancer Type confirm to agree.: confirm Nhấn chọn Delete Chọn Target Groups \u0026gt; chọn MyApp-TG Nhấn chọn Actions \u0026gt; chọn Delete 5. Dọn dẹp RDS Proxy Truy cập AWS RDS\nChọn Proxies \u0026gt; chọn MyApp-RDS-Proxy Nhấn chọn Actions \u0026gt; chọn Delete To confirm deletion, type delete me into the field: delete me Nhấn chọn Delete, thao tác này sẽ mất vài phút. 6. Dọn dẹp IAM Role Truy cập IAM\nChọn Roles \u0026gt; chọn codeDeployServiceRole, ecsTaskExecutionRole và rdsProxyServiceRole Nhấn chọn Delete To confirm deletion, enter delete in the text input field.: delete Nhấn chọn Delete Chọn Policies \u0026gt; chọn rdsProxyAccessPolicy Nhấn chọn Delete To confirm deletion, enter the policy name in the text input field.: rdsProxyAccessPolicy Nhấn chọn Delete Chọn ecsTaskRDSAccessPolicy Nhấn chọn Delete To confirm deletion, enter the policy name in the text input field.: ecsTaskRDSAccessPolicy Nhấn chọn Delete 7. Dọn dẹp Secrets Manager Truy cập AWS Secrets Manager\nMở MyAPP-Secret Nhấn chọn Actions \u0026gt; chọn Delete secret Nhấn chọn Schedule deletion 8. Dọn dẹp RDS Instance Truy cập AWS RDS\nChọn Databases \u0026gt; chọn MyApp-RDS Nhấn chọn Actions \u0026gt; chọn Delete To confirm deletion, type delete me into the field.: delete me Nhấn chọn Delete, thao tác này sẽ mất vài phút. Chọn Subnet groups \u0026gt; chọn MyApp-RDSSG Nhấn chọn Delete 9. Dọn dẹp Security Group Truy cập AWS VPC\nChọn Security groups \u0026gt; chọn SG-ALB, SG-ECS, SG-RDSProxy và SG-RDS Nhấn chọn Actions \u0026gt; chọn Delete security group To confirm deletion, enter delete below.: delete Nhấn chọn Delete 10. Dọn dẹp Internet Gateway và NAT Gateway Truy cập AWS VPC\nChọn NAT gateways \u0026gt; chọn MyApp-NAT Nhấn chọn Actions \u0026gt; chọn Delete NAT gateway To confirm deletion, type delete in the field:: delete Nhấn chọn Delete, thao tác này sẽ mất vài phút. Chọn Elastic IPs \u0026gt; chọn Elastic IP đã được sinh ra Nhấn chọn Actions \u0026gt; chọn Release Elastic IP addresses Nhấn chọn Release Chọn Internet gateways \u0026gt; chọn MyApp-IGW Nhấn chọn Actions \u0026gt; chọn Detach from VPC Nhấn chọn Detach internet gateway Chọn MyApp-IGW Nhấn chọn Actions \u0026gt; chọn Delete internet gateway To confirm deletion, type delete in the field:: delete Nhấn chọn Delete internet gateway 11. Dọn dẹp VPC và Subnet Truy cập AWS VPC\nChọn Subnets \u0026gt; chọn PublicSubnet1, PublicSubnet2, PrivateSubnet1 và PrivateSubnet2 Nhấn chọn Actions \u0026gt; chọn Delete subnet To confirm deletion, type delete in the field: delete\nNhấn chọn Delete\nChọn Your VPCs \u0026gt; chọn MyApp-VPC\nNhấn chọn Actions \u0026gt; chọn Delete VPC\nTo confirm deletion, type delete in the field:: delete Nhấn chọn Delete "
},
{
	"uri": "/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]